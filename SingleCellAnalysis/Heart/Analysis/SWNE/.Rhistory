mito.genes <- grep(pattern = "^MT-", x = rownames(x = se.obj@data), value = TRUE)
percent.mito <- Matrix::colSums(se.obj@raw.data[mito.genes, ])/Matrix::colSums(se.obj@raw.data)
se.obj1 <- AddMetaData(object = se.obj, metadata = percent.mito, col.name = "percent.mito")
se.obj2 = AddMetaData(object=se.obj1,metadata = AnnotationFile2)
VlnPlot(object = se.obj2, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
se.obj3 <- FilterCells(object = se.obj2, subset.names = c("nGene", "percent.mito"),
low.thresholds = c(200, -Inf), high.thresholds = c(2500, 0.05))
se.obj4 <- NormalizeData(object = se.obj3, normalization.method = "LogNormalize",
scale.factor = 10000)
se.obj5 <- FindVariableGenes(object = se.obj4, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
length(x = se.obj5@var.genes)
se.obj6 <- ScaleData(object = se.obj5, vars.to.regress = c("nUMI", "percent.mito"))
se.obj6 <- ScaleData(object = se.obj5, vars.to.regress = c("nUMI", "percent.mito"))
se.obj <- CreateSeuratObject(raw.data = expression.data, min.cells = 3, min.genes = 200,
project = "10X_old")
mito.genes <- grep(pattern = "^MT-", x = rownames(x = se.obj@data), value = TRUE)
percent.mito <- Matrix::colSums(se.obj@raw.data[mito.genes, ])/Matrix::colSums(se.obj@raw.data)
# Add percent.mito to the metadata
se.obj1 <- AddMetaData(object = se.obj, metadata = percent.mito, col.name = "percent.mito")
# Also add the cell annotation as part of the metadata
se.obj2 = AddMetaData(object=se.obj1,metadata = AnnotationFile2)
se.obj3 <- FilterCells(object = se.obj2, subset.names = c("nGene", "percent.mito"),
low.thresholds = c(200, -Inf), high.thresholds = c(2500, 0.05))
# Normalizing the data
se.obj4 <- NormalizeData(object = se.obj3, normalization.method = "LogNormalize",
scale.factor = 10000)
# Detection of variable genes across the single cells
se.obj5 <- FindVariableGenes(object = se.obj4, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
length(x = se.obj5@var.genes)
se.obj6 <- ScaleData(object = se.obj5, vars.to.regress = c("nUMI", "percent.mito"))
counts <- as(se.obj6@raw.data, "dgCMatrix")[,se.obj6@cell.names]
counts <- FilterData(counts, min.samples.frac = 0.0025, min.nonzero.features = 200, trim = 0.001)
dim(counts)
norm.counts <- ScaleCounts(counts, batch = NULL, method = "log", adj.var = T)
var.genes <- intersect(se.obj@var.genes, rownames(counts))
length(var.genes)
var.genes <- intersect(se.obj6@var.genes, rownames(counts))
length(var.genes)
se.obj6@ident
names(cell.clusters)
se.obj7 <- RunPCA(object = se.obj6, pc.genes = se.obj6@var.genes, do.print = TRUE, pcs.print = 1:5,
genes.print = 5)
se.obj8 <- FindClusters(object = se.obj7, reduction.type = "pca", dims.use = 1:10,
resolution = 0.6, print.output = 0, save.SNN = TRUE)
se.obj8@cell.names
# Pull out the raw counts, filter cells and genes, and trim each gene to reduce outliers
counts <- as(se.obj8@raw.data, "dgCMatrix")[,se.obj8@cell.names]
counts <- FilterData(counts, min.samples.frac = 0.0025, min.nonzero.features = 200, trim = 0.001)
dim(counts)
# Have 11582 genes (rows) and 4207 cells (columns)
# We need to scale the data and adjust gene variance, while keeping the scaled matrix nonnegative.
norm.counts <- ScaleCounts(counts, batch = NULL, method = "log", adj.var = T)
# Most scRNA-seq pipelines only use a subset of highly overdispersed genes for analysis. Weâ€™ll pull out those variable genes here, as well as the cluster labels.
## Pull out overdispersed genes as defined by Seurat
var.genes <- intersect(se.obj8@var.genes, rownames(counts))
length(var.genes)
cell.clusters <- se.obj8@ident; names(cell.clusters) <- se.obj8@cell.names;
levels(cell.clusters)
loss <- "mse" ## Loss function
n.cores <- 1 ## Number of cores to use
k.range <- seq(2,10,2)
k.range
k.res <- FindNumFactors(norm.counts[var.genes,], k.range = k.range, n.cores = n.cores, do.plot = T, loss = loss)
k.range <- seq(2,12,2)
k.res <- FindNumFactors(norm.counts[var.genes,], k.range = k.range, n.cores = n.cores, do.plot = T, loss = loss)
k.range <- seq(2,20,2) ## Range of factors to iterate over
k.res <- FindNumFactors(norm.counts[var.genes,], k.range = k.range, n.cores = n.cores, do.plot = T, loss = loss)
k.res$k
k <- 12
nmf.res <- RunNMF(norm.counts[var.genes,], k = k, alpha = 0, init = "ica", n.cores = n.cores, loss = loss)
nmf.scores <- nmf.res$H
snn <- se.obj8@snn
alpha.exp <- 1.25
snn.exp <- 1.0
n_pull <- 4
swne.embedding <- EmbedSWNE(nmf.scores, snn, alpha.exp = alpha.exp, snn.exp = snn.exp,
n_pull = n_pull, dist.use = "IC")
color.seed <- 32566
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T,
label.size = 3.5, pt.size = 1.25, show.legend = T, seed = color.seed)
swne.embedding$H.coords$name <- ""
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T,
label.size = 3.5, pt.size = 1.25, show.legend = T, seed = color.seed)
genes.embed <- c("Cfh", "Mgp", "Tagln", "Rgs5",
"Myl9", "Npr3", "Plvap", "Acta2", "Cxcl12")
genes.embed <- c("Cfh", "Mgp", "Tagln", "Rgs5",
"Myl9", "Npr3", "Plvap", "Acta2", "Cxcl12")
nmf.res$W <- ProjectFeatures(norm.counts, nmf.scores, loss = loss, n.cores = n.cores)
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T,
label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
gene.use <- "Plvap"
gene.expr <- norm.counts[gene.use,]
FeaturePlotSWNE(swne.embedding, gene.expr, gene.use, alpha.plot = 0.4, label.size = 3.5, pt.size = 1.25)
tsne.scores <- GetCellEmbeddings(se.obj8, reduction.type = "tsne")
gene.loadings <- nmf.res$W
top.factor.genes.df <- SummarizeAssocFeatures(gene.loadings, features.return = 3)
head(top.factor.genes.df)
gene.loadings.heat <- gene.loadings[unique(top.factor.genes.df$feature),]
ggHeat(gene.loadings.heat, clustering = "col")
library(Seurat)
library(cowplot)
library(swne)
# read in the expression matrix
Combined = read.csv("Combined.csv",row.names=1)
# Sanity check
dim(Combined)
Combined[1:3,1:3]
# The csv files contains Cells as columns and Genes (features) in rows
# Size of data set is 4348 Cells and 27998 Genes
# Lets save the cell names of this dataset to be used to create the annotation file
Names = colnames(Combined)
# This has genes as rows (~27k) and cells as columns (4348)
# I created an annotation that has 1 column, CellType and 4348 rows. Each row matches each column in the
# Combined data and describes each of these cells as either Young nor Old
# Read in the annotation file
AnnotationFile = read.csv('CellAnnotation.csv',row.names=1)
# Sanity check
dim(AnnotationFile)
head(AnnotationFile)
tail(AnnotationFile)
# The annotation file has rownames as sequential indexes.
# Reformat the annotation file to have the cell names from the combined as rownames
# Add the Names from Combined data as another column in the annotation file
AnnotationFile1 = cbind(AnnotationFile,'CellNames'= Names)
# Sanity check
head(AnnotationFile1)
# Now make this CellNames column as the row names
rownames(AnnotationFile1) = AnnotationFile1$CellNames
# Sanity check
head(AnnotationFile1)
# Now drop the redundant CellNames column
library(dplyr)
AnnotationFile2 = AnnotationFile1 %>% select(-CellNames)
# Sanity check
head(AnnotationFile2)
Combined1 = data.matrix(Combined)
# Then convert to a sparse matrix
expression.data <- Matrix(Combined1, sparse = T)
expression.data[1:3,1:3]
se.obj <- CreateSeuratObject(raw.data = expression.data, min.cells = 3, min.genes = 200,
project = "10X_old")
mito.genes <- grep(pattern = "^MT-", x = rownames(x = se.obj@data), value = TRUE)
percent.mito <- Matrix::colSums(se.obj@raw.data[mito.genes, ])/Matrix::colSums(se.obj@raw.data)
# Add percent.mito to the metadata
se.obj1 <- AddMetaData(object = se.obj, metadata = percent.mito, col.name = "percent.mito")
# Also add the cell annotation as part of the metadata
se.obj2 = AddMetaData(object=se.obj1,metadata = AnnotationFile2)
se.obj3 <- FilterCells(object = se.obj2, subset.names = c("nGene", "percent.mito"),
low.thresholds = c(200, -Inf), high.thresholds = c(2500, 0.05))
# Normalizing the data
se.obj4 <- NormalizeData(object = se.obj3, normalization.method = "LogNormalize",
scale.factor = 10000)
# Detection of variable genes across the single cells
se.obj5 <- FindVariableGenes(object = se.obj4, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
# Found 1526 variable genes
length(x = se.obj5@var.genes)
se.obj6 <- ScaleData(object = se.obj5, vars.to.regress = c("nUMI", "percent.mito"))
# Perform a linear dimension reduction on the scaled data
se.obj7 <- RunPCA(object = se.obj6, pc.genes = se.obj6@var.genes, do.print = TRUE, pcs.print = 1:5,
genes.print = 5)
# Using the dimensions 1 to 10 to discover clusters with a resolution of 0.6.
# Increasing this resolution up to 1.2 will increase the number of clusters discovered
# So this might be something I should explore later.
se.obj8 <- FindClusters(object = se.obj7, reduction.type = "pca", dims.use = 1:10,
resolution = 0.6, print.output = 0, save.SNN = TRUE)
se.obj9 <- RunTSNE(object = se.obj8, dims.use = 1:10, do.fast = TRUE)
TSNEPlot(object = se.obj9,do.label=TRUE)
se.obj9@meta.data$CellType
se.obj9@cell.names
se.obj9@ident
TSNEPlot(object = se.obj10)
se.obj10 <- SetAllIdent(object = se.obj9, id = "CellType")
TSNEPlot(object = se.obj10)
counts <- as(se.obj10@raw.data, "dgCMatrix")[,se.obj10@cell.names]
se.obj10@cell.names
counts
counts[1:3,1:3]
counts@factors
counts@i
counts@p
counts <- FilterData(counts, min.samples.frac = 0.0025, min.nonzero.features = 200, trim = 0.001)
dim(counts)
norm.counts <- ScaleCounts(counts, batch = NULL, method = "log", adj.var = T)
var.genes <- intersect(se.obj10@var.genes, rownames(counts))
length(var.genes)
cell.clusters <- se.obj810ident
cell.clusters <- se.obj10ident
cell.clusters <- se.obj@10ident
cell.clusters <- se.obj10@ident
se.obj10@ident
se.obj10@cell.names
names(cell.clusters) <- se.obj10@cell.names;
levels(cell.clusters)
loss <- "mse" ## Loss function
n.cores <- 1
k.range <- seq(2,20,2)
k.res <- FindNumFactors(norm.counts[var.genes,], k.range = k.range, n.cores = n.cores, do.plot = T, loss = loss)
k.res$k
nmf.res <- RunNMF(norm.counts[var.genes,], k = k, alpha = 0, init = "ica", n.cores = n.cores, loss = loss)
k <- 12
nmf.res <- RunNMF(norm.counts[var.genes,], k = k, alpha = 0, init = "ica", n.cores = n.cores, loss = loss)
nmf.scores <- nmf.res$H
snn <- se.obj10@snn
alpha.exp <- 1.25
snn.exp <- 1.0
n_pull <- 4
swne.embedding <- EmbedSWNE(nmf.scores, snn, alpha.exp = alpha.exp, snn.exp = snn.exp,
n_pull = n_pull, dist.use = "IC")
color.seed <- 32566
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T,label.size = 3.5, pt.size = 1.25, show.legend = T, seed = color.seed)
se.obj9@ident
cell.clusters <- se.obj9@ident;
names(cell.clusters) <- se.obj9@cell.names;
levels(cell.clusters)
nmf.res <- RunNMF(norm.counts[var.genes,], k = k, alpha = 0, init = "ica", n.cores = n.cores, loss = loss)
nmf.scores <- nmf.res$H
snn <- se.obj9@snn
alpha.exp <- 1.25
snn.exp <- 1.0
n_pull <- 4
swne.embedding <- EmbedSWNE(nmf.scores, snn, alpha.exp = alpha.exp, snn.exp = snn.exp,
n_pull = n_pull, dist.use = "IC")
color.seed <- 32566
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T,label.size = 3.5, pt.size = 1.25, show.legend = T, seed = color.seed)
swne.embedding$H.coords$name <- ""
genes.embed <- c("Cfh", "Mgp", "Tagln", "Rgs5",
"Myl9", "Npr3", "Plvap", "Acta2", "Cxcl12")
nmf.res$W <- ProjectFeatures(norm.counts, nmf.scores, loss = loss, n.cores = n.cores)
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T,
label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
se.obj9@meta.data$CellType
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = se.obj9@meta.data$CellType, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
se.obj9@ident
cell.clusters <- se.obj9@ident;
names(cell.clusters) <- se.obj9@cell.names;
levels(cell.clusters)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
se.obj9@meta.data$CellType
cell.clusters <- se.obj9@ident;
names(cell.clusters) <- se.obj9@meta.data$CellType;
levels(cell.clusters)
cell.clusters
se.obj9@ident
cell.clusters <- se.obj9@meta.data$CellType;
cell.clusters
names(cell.clusters) <- se.obj9@cell.names;
levels(cell.clusters)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
gene.loadings <- nmf.res$W
top.factor.genes.df <- SummarizeAssocFeatures(gene.loadings, features.return = 3)
top.factor.genes.df <- SummarizeAssocFeatures(gene.loadings, features.return = 3)
head(top.factor.genes.df)
tail(top.factor.genes.df)
head(top.factor.genes.df)
tail(top.factor.genes.df)
tsne.scores <- GetCellEmbeddings(se.obj10, reduction.type = "tsne")
PlotDims(tsne.scores, sample.groups = cell.clusters, pt.size = 1, label.size = 3.5, alpha = 0.4,show.legend = F, seed = color.seed, show.axes = F)
color.mapping <- ExtractSWNEColors(swne.embedding, sample.groups = cell.clusters, seed = color.seed)
devtools::install_github("yanwu2014/swne")
library(Seurat)
library(cowplot)
library(swne)
# read in the expression matrix
Combined = read.csv("Combined.csv",row.names=1)
# Sanity check
dim(Combined)
Combined[1:3,1:3]
# The csv files contains Cells as columns and Genes (features) in rows
# Size of data set is 4348 Cells and 27998 Genes
# Lets save the cell names of this dataset to be used to create the annotation file
Names = colnames(Combined)
# This has genes as rows (~27k) and cells as columns (4348)
# I created an annotation that has 1 column, CellType and 4348 rows. Each row matches each column in the
# Combined data and describes each of these cells as either Young nor Old
# Read in the annotation file
AnnotationFile = read.csv('CellAnnotation.csv',row.names=1)
# Sanity check
dim(AnnotationFile)
head(AnnotationFile)
tail(AnnotationFile)
# The annotation file has rownames as sequential indexes.
# Reformat the annotation file to have the cell names from the combined as rownames
# Add the Names from Combined data as another column in the annotation file
AnnotationFile1 = cbind(AnnotationFile,'CellNames'= Names)
# Sanity check
head(AnnotationFile1)
# Now make this CellNames column as the row names
rownames(AnnotationFile1) = AnnotationFile1$CellNames
# Sanity check
head(AnnotationFile1)
# Now drop the redundant CellNames column
library(dplyr)
AnnotationFile2 = AnnotationFile1 %>% select(-CellNames)
# Sanity check
head(AnnotationFile2)
# First make the expression data as a sparse data frame to speed up computation.
# Our combined data is not numeric, so convert the data frame to numeric
Combined1 = data.matrix(Combined)
# Then convert to a sparse matrix
expression.data <- Matrix(Combined1, sparse = T)
# Generating Seurat Object
se.obj <- CreateSeuratObject(raw.data = expression.data, min.cells = 3, min.genes = 200,
project = "10X_old")
mito.genes <- grep(pattern = "^MT-", x = rownames(x = se.obj@data), value = TRUE)
percent.mito <- Matrix::colSums(se.obj@raw.data[mito.genes, ])/Matrix::colSums(se.obj@raw.data)
# Add percent.mito to the metadata
se.obj1 <- AddMetaData(object = se.obj, metadata = percent.mito, col.name = "percent.mito")
# Also add the cell annotation as part of the metadata
se.obj2 = AddMetaData(object=se.obj1,metadata = AnnotationFile2)
# This threw up a warning. Understand that warning. The plot is also kinda different from the plot from the tutorial;
# The warning is that all cells have the same value of feature
se.obj3 <- FilterCells(object = se.obj2, subset.names = c("nGene", "percent.mito"),
low.thresholds = c(200, -Inf), high.thresholds = c(2500, 0.05))
# Normalizing the data
se.obj4 <- NormalizeData(object = se.obj3, normalization.method = "LogNormalize",
scale.factor = 10000)
# Detection of variable genes across the single cells
se.obj5 <- FindVariableGenes(object = se.obj4, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
# Found 1526 variable genes
length(x = se.obj5@var.genes)
se.obj6 <- ScaleData(object = se.obj5, vars.to.regress = c("nUMI", "percent.mito"))
# Perform a linear dimension reduction on the scaled data
se.obj7 <- RunPCA(object = se.obj6, pc.genes = se.obj6@var.genes, do.print = TRUE, pcs.print = 1:5,
genes.print = 5)
# Using the dimensions 1 to 10 to discover clusters with a resolution of 0.6.
# Increasing this resolution up to 1.2 will increase the number of clusters discovered
# So this might be something I should explore later.
se.obj8 <- FindClusters(object = se.obj7, reduction.type = "pca", dims.use = 1:10,
resolution = 0.6, print.output = 0, save.SNN = TRUE)
se.obj9 <- RunTSNE(object = se.obj8, dims.use = 1:10, do.fast = TRUE)
TSNEPlot(object = se.obj9,do.label=TRUE)
se.obj10 <- SetAllIdent(object = se.obj9, id = "CellType")
TSNEPlot(object = se.obj10)
counts <- as(se.obj10@raw.data, "dgCMatrix")[,se.obj10@cell.names]
counts <- FilterData(counts, min.samples.frac = 0.0025, min.nonzero.features = 200, trim = 0.001)
dim(counts)
norm.counts <- ScaleCounts(counts, batch = NULL, method = "log", adj.var = T)
var.genes <- intersect(se.obj10@var.genes, rownames(counts))
length(var.genes)
cell.clusters <- se.obj10@ident;
names(cell.clusters) <- se.obj10@cell.names;
levels(cell.clusters)
cell.clusters <- se.obj9@ident;
names(cell.clusters) <- se.obj9@cell.names;
levels(cell.clusters)
loss <- "mse" ## Loss function
n.cores <- 1
k.range <- seq(2,20,2)
k.res <- FindNumFactors(norm.counts[var.genes,], k.range = k.range, n.cores = n.cores, do.plot = T, loss = loss)
k <- 12
nmf.res <- RunNMF(norm.counts[var.genes,], k = k, alpha = 0, init = "ica", n.cores = n.cores, loss = loss)
nmf.scores <- nmf.res$H
snn <- se.obj9@snn
alpha.exp <- 1.25 #
snn.exp <- 1.0
n_pull <- 4
swne.embedding <- EmbedSWNE(nmf.scores, snn, alpha.exp = alpha.exp, snn.exp = snn.exp,n_pull = n_pull, dist.use = "IC")
color.seed <- 32566
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T,label.size = 3.5, pt.size = 1.25, show.legend = T, seed = color.seed)
swne.embedding$H.coords$name <- ""
nmf.res$W <- ProjectFeatures(norm.counts, nmf.scores, loss = loss, n.cores = n.cores)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
cell.clusters <- se.obj10@ident;
names(cell.clusters) <- se.obj10@cell.names;
levels(cell.clusters)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
cell.clusters <- se.obj9@ident;
names(cell.clusters) <- se.obj9@cell.names;
levels(cell.clusters)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
tsne.scores <- GetCellEmbeddings(se.obj9, reduction.type = "tsne")
PlotDims(tsne.scores, sample.groups = cell.clusters, pt.size = 1, label.size = 3.5, alpha = 0.4,show.legend = F, seed = color.seed, show.axes = F)
genes.embed <- c("Aqp1", "Hspa1a", "Jun", "Junb",
"Cdkn1a", "Egr1", "Aplnr", "Sox4", "Timp4")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Aqp1", "Fabp4", "Gpihbp1", "Rgcc",
"C1qtnf9", "Car4", "Slc28a2", "Trp53i11", "Timp4")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
# Cluster 2 markers from Seurat
genes.embed <- c("Cxcl12", "Aqp7", "Mgll", "Rbp7",
"Btnl9", "Slc26a10", "Slc6a6", "Gja1", "Car4")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Fbln5", "Stmn2", "Glul", "Alpl",
"Rbp7", "Alox12", "Hey1", "Nebl", "Vegfc")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Ifit1", "Ifit3", "Isg15", "Ifit2",
"Rsad2", "Rtp4", "ligp1", "Irf7", "Usp18")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
genes.embed <- c("Ifit1", "Ifit3", "Isg15", "Ifit2",
"Rsad2", "Rtp4", "ligp1", "Irf7", "Usp18")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
genes.embed <- c("Fbln5", "Stmn2", "Glul", "Alpl",
"Rbp7", "Alox12", "Hey1", "Nebl", "Vegfc")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
genes.embed <- c("Ifit1", "Ifit3", "Isg15", "Ifit2","Rsad2", "Rtp4", "ligp1", "Irf7", "Usp18")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
genes.embed <- c("Ifit1", "Ifit3", "Isg15", "Ifit2","Rsad2", "Rtp4", "ligp1", "Irf7")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
genes.embed <- c("Ifit1","Ifit3")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
genes.embed <- c("Ifit1","Ifit3","Isg15")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
genes.embed <- c("Ifit1","Ifit3","Isg15",'Ifit2')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Ifit1","Ifit3","Isg15",'Ifit2','Rsad2')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Ifit1","Ifit3","Isg15",'Ifit2','Rsad2','Rtp4')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Ifit1","Ifit3","Isg15",'Ifit2','Rsad2','Rtp4','ligp1')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
genes.embed <- c("Ifit1","Ifit3","Isg15",'Ifit2','Rsad2','Rtp4','Irf7')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Ifit1","Ifit3","Isg15",'Ifit2','Rsad2','Rtp4','Irf7','Usp18','Stat1')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Cfh","Dcn","Mgp",'Cpe','Apoe','Cytl1','Rbp1','Bgn','Pam','H19')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Ift122","Fscn1","Mycn",'Tubb5','Hmgb2','Tmsb10','H2afz','Sparc','Mest')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Prss23","Calcrl","Vwf",'Cd9','Vcam1','Fmo2','Eln','Tgm2','Emp3')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Mmrn1","Ccl21a","Pard6g",'Fgl2','Lcn2','Reln','Lyve1','Prss23','Lrg1')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Rgs5","Acta2","Tpm2",'Myl9','Tagln','Myh11','Ndufa4l2','Gsn','Errfi1')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Cd74","Rac2","Cd52",'H2-Ab1','Cd79a','H2-Aa','H2-Eb1','Cd79b','Ly6d')
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
gene.loadings <- nmf.res$W
top.factor.genes.df <- SummarizeAssocFeatures(gene.loadings, features.return = 3)
write.csv(top.factor.genes.df,'topfactors.csv')
genes.embed <- c("Cxcl12","Slc6a6","Slc26a10")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Pam","Clu","Bgn")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Stmn2","Rbp7","Fbln5")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Aqp1","Aplnr","B2m")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Apoe","Mgp","Cfh")
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Junb","Jun","Fos")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Cd74","H2-Ab1","H2-Aa")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Actb","Lrrc8a","Dusp3")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Gpihbp1","Cd36","mt-Nd1")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Rgs5","Acta2","Tpm2")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Isg15","Ifit1","Ifit3")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
genes.embed <- c("Mmrn1","Ccl21a","Fgl2")
swne.embedding <- EmbedFeatures(swne.embedding, nmf.res$W, genes.embed, n_pull = 4)
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
gene.use <- "Plvap"
gene.expr <- norm.counts[gene.use,]
FeaturePlotSWNE(swne.embedding, gene.exp
gene.expr <- norm.counts[gene.use,]
gene.use <- "Plvap"
gene.expr <- norm.counts[gene.use,]
FeaturePlotSWNE(swne.embedding, gene.expr, gene.use, alpha.plot = 0.4, label.size = 3.5, pt.size = 1.25)
cell.clusters <- se.obj9@ident;
names(cell.clusters) <- se.obj9@cell.names;
PlotSWNE(swne.embedding, alpha.plot = 0.4, sample.groups = cell.clusters, do.label = T, label.size = 3.5, pt.size = 1.25, show.legend = F, seed = color.seed)
swne.embedding <- EmbedSWNE(nmf.scores, snn, alpha.exp = alpha.exp, snn.exp = snn.exp,n_pull = n_pull, dist.use = "IC")
gene.use <- "Plvap"
gene.expr <- norm.counts[gene.use,]
FeaturePlotSWNE(swne.embedding, gene.expr, gene.use, alpha.plot = 0.4, label.size = 3.5, pt.size = 1.25)
swne.embedding$H.coords$name <- ""
FeaturePlotSWNE(swne.embedding, gene.expr, gene.use, alpha.plot = 0.4, label.size = 3.5, pt.size = 1.25)
color.mapping <- ExtractSWNEColors(swne.embedding, sample.groups = cell.clusters, seed = color.seed)
gene.loadings.heat <- gene.loadings[unique(top.factor.genes.df$feature),]
ggHeat(gene.loadings.heat, clustering = "col")
color.mapping
TSNEPlot(se.obj9, colors.use = color.mapping)

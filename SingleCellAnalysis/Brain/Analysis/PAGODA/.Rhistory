setwd("~/Desktop/Young/filtered_gene_bc_matrices/mm10")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(Matrix)
New.data <- Read10X(data.dir =  "/Users/emechebe/Desktop/Young/filtered_gene_bc_matrices/mm10")
Young = as.matrix(x=New.data)
dim(Young)
Young_transposed = t(Young)
dim(Young_transposed)
1:nrow(Young_transposed)
Young_transposed$CellNames = 1:nrow(Young_transposed)
dim(Young_transposed)
Young = as.matrix(x=New.data)
dim(Young)
Young_transposed = t(Young)
dim(Young_transposed)
Young_transposed = cbind(Young_transposed,'CellNames'=1:nrow(Young_transposed))
dim(Young_transposed)
Young_transposed[1:3,1:3]
Young_transposed[1:3,-1:3]
Young_transposed[1:3,27999]
Young_transposed[1:3,27998:27999]
head(Young_transposed$CellNames)
Young_transposed$CellNames
head(Young_transposed[,27999])
rownames(Young_transposed)=Young_transposed[,27999]
Young_transposed[1:3,1:3]
Young_transposed[1:3,27998:27999]
Young_transposed[,27999] = NULL
Young_transposed[1:3,27998:27999]
Young_transposed = Young_transposed[-27999]
dim(Young_transposed)
Young = as.matrix(x=New.data)
dim(Young)
Young_transposed = t(Young)
dim(Young_transposed)
Young_transposed = cbind(Young_transposed,'CellNames'=1:nrow(Young_transposed))
Young = as.matrix(x=New.data)
dim(Young)
Young_transposed = t(Young)
dim(Young_transposed)
Young_transposed[1:3,1:3]
Young_transposed = cbind(Young_transposed,'CellNames'=1:nrow(Young_transposed))
Young_transposed[1:3,1:3]
dim(Young_transposed)
Young_transposed[1:3,27998:27999]
Young_transposed$V27999
Young_transposed[,27999] <- paste("Cell",Young_transposed[,27999], sep="")
Young_transposed[1:3,27998:27999]
Young = as.matrix(x=New.data)
dim(Young)
Young_transposed = t(Young)
dim(Young_transposed)
Young_transposed = cbind(Young_transposed,'CellNames'=1:nrow(Young_transposed))
dim(Young_transposed)
Young_transposed[1:3,27998:27999]
Young_transposed_df = as.data.frame(Young_transposed)
dim(Young_transposed_df)
head(Young_transposed_df$CellNames)
Young_transposed_df$CellNames <- paste("Cell",Young_transposed_df$CellNames, sep="_")
Young_transposed_df[1:3,27998:27999]
rownames(Young_transposed_df)=Young_transposed_df$CellNames
Young_transposed_df[1:3,1:3]
Young_transposed_df$CellNames = NULL
dim(Young_transposed_df)
Young_transposed_df[1:3,1:3]
Young_transposed_df[1:3,27997:27998]
Young_df = t(Young_transposed_df)
dim(Young_df)
Young_df[1:3,1:3]
write.csv(Young_df,'YoungBrainEndothelialCells.csv')
getwd()
setwd("~/Desktop")
data = read.csv('YoungBrainEndothelialCells.csv', row.names=1)
data[1:3,1:3]
dim(data)
setwd("~/Desktop/Old/filtered_gene_bc_matrices/mm10")
knitr::opts_chunk$set(echo = TRUE)
old.data <- Read10X(data.dir =  "/Users/emechebe/Desktop/Old/filtered_gene_bc_matrices/mm10")
Old = as.matrix(x=old.data)
dim(Old)
Old_transposed = t(Old)
dim(Old_transposed)
Old_transposed[1:3,1:3]
Old_transposed = cbind(Old_transposed,'CellNames'=1:nrow(Old_transposed))
dim(Old_transposed)
Old_transposed[1:3,27998:27999]
Old_transposed_df = as.data.frame(Old_transposed)
dim(Old_transposed_df)
Old_transposed_df$CellNames <- paste("Cell",Old_transposed_df$CellNames, sep="_")
rownames(Old_transposed_df)=Old_transposed_df$CellNames
Old_transposed_df[1:3,1:3]
Old_transposed_df$CellNames = NULL
dim(Old_transposed_df)
Old_transposed_df[1:3,1:3]
Old_transposed_df[1:3,1:3]
Old_transposed_df[1:3,27997:27998]
Old_df = t(Old_transposed_df)
dim(Old_df)
Old_df[1:3,1:3]
dim(Old_df)
write.csv(Old_df,'OldBrainEndothelialCells.csv')
setwd("~/Desktop")
data = read.csv('OldBrainEndothelialCells.csv', row.names=1)
dim(data)
data[1:3,1:3]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(rvest)
library(stringr)
library(scales)
df.oil <- read_html("https://en.wikipedia.org/wiki/List_of_countries_by_oil_production") %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
colnames(df.oil) <- c('rank', 'country', 'oil_bbl_per_day')
df.oil <- df.oil %>% mutate(rank = as.integer(rank))
df.oil %>% glimpse()
f.oil <- df.oil %>% mutate(oil_bbl_per_day = oil_bbl_per_day %>% str_replace_all(',','') %>% as.integer())
df.oil <- df.oil %>% mutate(oil_bbl_per_day = oil_bbl_per_day %>% str_replace_all(',','') %>% as.integer())
df.oil <- df.oil %>% mutate(opec_ind = if_else(str_detect(country, 'OPEC'), 1, 0))
df.oil <- df.oil %>% mutate(country = country %>% str_replace(' \\(OPEC\\)', '') %>% str_replace('\\s{2,}',' '))
df.oil <- df.oil %>% select(rank, country, opec_ind, oil_bbl_per_day)
map.world <- map_data('world')
head(map.world)
tail(map.world)
dim(map.world)
anti_join(df.oil, map.world, by = c('country' = 'region'))
map.world %>%
group_by(region) %>%
summarise() %>%
print(n = Inf)
df.oil <- df.oil %>%  mutate(country = recode(country, `United States` = 'USA'
, `United Kingdom` = 'UK'
, `Congo, Democratic Republic of the` = 'Democratic Republic of the Congo'
, `Trinidad and Tobago` = 'Trinidad'
, `Sudan and South Sudan` = 'Sudan'
#, `Sudan and  South Sudan` = 'South Sudan'
, `Congo, Republic of the` = 'Republic of Congo'
)
)
head(map.world)
head(df.oil)
map.oil <- left_join( map.world, df.oil, by = c('region' = 'country'))
head(map.oil)
map.oil <- right_join( map.world, df.oil, by = c('region' = 'country'))
head(map.oil)
map.oil <- left_join( map.world, df.oil, by = c('region' = 'country'))
ggplot(map.oil, aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = oil_bbl_per_day))
ggplot(map.oil, aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = oil_bbl_per_day)) +
scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
,values = scales::rescale(c(100,96581,822675,3190373,10000000))
,labels = comma
,breaks = c(100,96581,822675,3190373,10000000)
) +
guides(fill = guide_legend(reverse = T)) +
labs(fill = 'bbl/day'
,title = 'Oil Production by Country'
,subtitle = 'Barrels per day, 2016'
,x = NULL
,y = NULL) +
theme(text = element_text(family = 'Gill Sans', color = '#EEEEEE')
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 14)
,axis.ticks = element_blank()
,axis.text = element_blank()
,panel.grid = element_blank()
,panel.background = element_rect(fill = '#333333')
,plot.background = element_rect(fill = '#333333')
,legend.position = c(.18,.36)
,legend.background = element_blank()
,legend.key = element_blank()
) +
annotate(geom = 'text'
,label = 'Source: U.S. Energy Information Administration\nhttps://en.wikipedia.org/wiki/List_of_countries_by_oil_production'
,x = 18, y = -55
,size = 3
,family = 'Gill Sans'
,color = '#CCCCCC'
,hjust = 'left'
)
df.oil %>% filter(oil_bbl_per_day > 822675) %>% summarise(mean(oil_bbl_per_day))
# 3190373
df.oil %>% filter(oil_bbl_per_day < 822675) %>% summarise(mean(oil_bbl_per_day))
# 96581.08
ggplot(map.oil, aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = oil_bbl_per_day)) +
scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
,values = scales::rescale(c(100,96581,822675,3190373,10000000))
,labels = comma
,breaks = c(100,96581,822675,3190373,10000000)
) +
guides(fill = guide_legend(reverse = T)) +
labs(fill = 'bbl/day'
,title = 'Oil Production by Country'
,subtitle = 'Barrels per day, 2016'
,x = NULL
,y = NULL) +
theme(text = element_text(family = 'Gill Sans', color = '#EEEEEE')
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 14)
,axis.ticks = element_blank()
,axis.text = element_blank()
,panel.grid = element_blank()
,panel.background = element_rect(fill = '#333333')
,plot.background = element_rect(fill = '#333333')
,legend.position = c(.18,.36)
,legend.background = element_blank()
,legend.key = element_blank()
) +
annotate(geom = 'text'
,label = 'Source: U.S. Energy Information Administration\nhttps://en.wikipedia.org/wiki/List_of_countries_by_oil_production'
,x = 18, y = -55
,size = 3
,family = 'Gill Sans'
,color = '#CCCCCC'
,hjust = 'left'
)
getwd()
setwd("~/Desktop/SingleCellHarvard2015")
knitr::opts_chunk$set(echo = TRUE)
# read in the expression matrix
Combined = read.csv("Combined.csv",row.names=1)
# Sanity check
Combined[1:3,1:3]
# The csv files contains Cells as columns and Genes (features) in rows
# Size of data set is 1417 Cells and 27998 Genes
dim(Combined)
# Lets save the cell names of this dataset to be used to create the annotation file
Names = colnames(Combined)
# This has genes as rows (~27k) and cells as columns (1417)
# I created an annotation that has 1 column, CellType and 1417 rows. Each row matches each column in the
# Combined data and describes each of these cells as either Young nor Old
# Read in the annotation file
AnnotationFile = read.csv('CellAnnotation.csv',row.names=1)
# Sanity check
dim(AnnotationFile)
head(AnnotationFile)
tail(AnnotationFile)
# The annotation file has rownames as sequential indexes.
# Reformat the annotation file to have the cell names from the combined as rownames
# Add the Names from Combined data as another column in the annotation file
AnnotationFile1 = cbind(AnnotationFile,'CellNames'= Names)
# Sanity check
head(AnnotationFile1)
# Now make this CellNames column as the row names
rownames(AnnotationFile1) = AnnotationFile1$CellNames
# Sanity check
head(AnnotationFile1)
# Now drop the redundant CellNames column
library(dplyr)
AnnotationFile2 = AnnotationFile1 %>% select(-CellNames)
# Sanity check
head(AnnotationFile2)
Combined2 <- Combined[rowSums(Combined>0)>5, ]
mat = log10(as.matrix(Combined2)+1)
# Sanity check
mat[1:5,1:5]
library(Rtsne)
d <- dist(t(mat))
require(devtools)
install_version("flexmix", version = "2.3-13", repos = "http://cran.us.r-project.org")
library(scde)
sessionInfo()
load('knn.Rdata')
varinfo <- pagoda.varnorm(knn, counts = Combined2, trim = 3/ncol(Combined2), max.adj.var = 5, n.cores = 1, plot = TRUE,verbose = 1)
varinfo <- pagoda.subtract.aspect(varinfo, colSums(Combined2[, rownames(knn)]>0))
source("https://bioconductor.org/biocLite.R")
biocLite("org.Mm.eg.db")
library(org.Mm.eg.db)
ids <- unlist(lapply(mget(rownames(Combined2), org.Mm.egALIAS2EG, ifnotfound = NA), function(x) x[1]))
rids <- names(ids)
names(rids) <- ids
go.env <- eapply(org.Mm.egGO2ALLEGS, function(x) as.character(na.omit(rids[x])))
go.env <- go.env[unlist(lapply(go.env, length))>5]
biocLite("GO.db")
library(GO.db)
desc <- unlist(lapply(mget(names(go.env), GOTERM, ifnotfound = NA), function(x) if(is.logical(x)) { return("") } else { slot(x, "Term")}))
names(go.env) <- paste(names(go.env), desc)
go.env <- list2env(go.env)
get("GO:0000002 mitochondrial genome maintenance", go.env)
go.env <- list2env(clean.gos(go.env, min.size=10, max.size=100))
length(go.env)
load('pwpca.Rdata')
load('clpca.Rdata')
df <- pagoda.top.aspects(pwpca, clpca, z.score = 1.96, return.table = TRUE)
head(df)
df[1:3,1:3]
tam <- pagoda.top.aspects(pwpca, clpca, z.score = 1.96)
hc <- pagoda.cluster.cells(tam, varinfo)
tamr <- pagoda.reduce.loading.redundancy(tam, pwpca, clpca)
tamr2 <- pagoda.reduce.redundancy(tamr, plot = FALSE)
pagoda.view.aspects(tamr2, cell.clustering = hc, box = TRUE, labCol = NA, margins = c(0.5, 20), col.cols = rbind(col=AnnotationFile2$CellType), top=10)
df[1:5,1:5]
head(clpca)
clpca[1:3,1:3]
clpca[1:3,1]
dim(clpca)
head(clpca$clusters)
head(clpca$clusters$geneCluster.93)
new=clpca$clusters$geneCluster.93
length(new)
new
head(clpca$clusters$geneCluster.136)
new=clpca$clusters$geneCluster.136
length(new)
new
head(hc)
hc$labels
hc$labels[1:3]
hc$merge[1:3]
hc$order
col.cols <- rbind(groups = cutree(hc, 12))
pagoda.view.aspects(tamr2, cell.clustering = hc, box = TRUE, labCol = NA, margins = c(0.5, 20), col.cols = rbind(col.cols,AnnotationFile2$CellType),top=20)
pagoda.view.aspects(tamr2, cell.clustering = hc, box = TRUE, labCol = NA, margins = c(0.5, 30), col.cols = rbind(col.cols,AnnotationFile2$CellType),top=20)
pagoda.view.aspects(tamr2, cell.clustering = hc, box = TRUE, labCol = NA, margins = c(0.5, 40), col.cols = rbind(col.cols,AnnotationFile2$CellType),top=20)
pagoda.view.aspects(tamr2, cell.clustering = hc, box = TRUE, labCol = NA, margins = c(0.5, 30), col.cols = rbind(col.cols,AnnotationFile2$CellType),top=20)
pagoda.view.aspects(tamr2, cell.clustering = hc, box = TRUE, labCol = NA, margins = c(0.5, 20), col.cols = rbind(col.cols,AnnotationFile2$CellType),top=20)
col.cols <- rbind(groups = cutree(hc, 8))
pagoda.view.aspects(tamr2, cell.clustering = hc, box = TRUE, labCol = NA, margins = c(0.5, 20), col.cols = rbind(col.cols,AnnotationFile2$CellType),top=20)
col.cols <- rbind(groups = cutree(hc, 12))
pagoda.view.aspects(tamr2, cell.clustering = hc, box = TRUE, labCol = NA, margins = c(0.5, 20), col.cols = rbind(col.cols,AnnotationFile2$CellType),top=20)
library(Rtsne)
app <- make.pagoda.app(tamr2, tam, varinfo, go.env, pwpca,col.cols = rbind(col.cols,AnnotationFile2$CellType), cell.clustering = hc, title = "ILCs")
show.app(app, "ILCs", browse = TRUE, port = 1468)
cell.clustering <- pagoda.cluster.cells(tam, varinfo, include.aspects=TRUE, verbose=TRUE, return.details=T)
set.seed(0)
tSNE.pagoda <- Rtsne(cell.clustering$distance, is_distance=TRUE, perplexity=10)
tSNE.pagoda1 <- Rtsne(cell.clustering$distance, is_distance=TRUE, perplexity=30,theta=0.1)
tsne_model_1 = Rtsne(cell.clustering$distance, check_duplicates=FALSE, pca=TRUE, perplexity=30, theta=0.5, dims=2)
par(mfrow=c(1,1), mar = rep(5,4))
plot(tSNE.pagoda$Y, col=AnnotationFile2$CellType, pch=16, main='PAGODA tSNE')
plot(tSNE.pagoda$Y, pch=16, main='PAGODA tSNE')
d_tsne_1 = as.data.frame(tSNE.pagoda1$Y)
d_tsne_1_original=d_tsne_1
fit_cluster_kmeans=kmeans(scale(d_tsne_1), 8)
d_tsne_1_original$cl_kmeans = factor(fit_cluster_kmeans$cluster)
fit_cluster_hierarchical=hclust(dist(scale(d_tsne_1)))
d_tsne_1_original$cl_hierarchical = factor(cutree(fit_cluster_hierarchical, k=8))
plot_cluster=function(data, var_cluster, palette)
{
ggplot(data, aes_string(x="V1", y="V2", color=var_cluster)) +
geom_point(size=1.5) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=20) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal") +
scale_colour_brewer(palette = palette)
}
library(ggplot2)
plot_k=plot_cluster(d_tsne_1_original, "cl_kmeans", "Accent")
plot_h=plot_cluster(d_tsne_1_original, "cl_hierarchical", "Set1")
library(gridExtra)
grid.arrange(plot_k, plot_h,  ncol=2)
write.csv(fit_cluster_kmeans$cluster,'clusters.csv')
fit_cluster_kmeans$centers
AnnotationFile2[1:3,1:3]
head(AnnotationFile2)
tail(AnnotatiionFile2)
tail(AnnotationFile2)
names(fit_cluster_kmeans)
factor(fit_cluster_kmeans$cluster)
head(d_tsne_1)
head(d_tsne_1_original)
d_tsne_1_original$CellNames = rownames(AnnotationFile2)
head(d_tsne_1_original)
library(dplyr)
Cell_Cluster = d_tsne_1_original %>% select(CellNames,cl_kmeans,cl_hierarchical)
Cell_Cluster = as.data.frame(d_tsne_1_original) %>% select(CellNames,cl_kmeans,cl_hierarchical)
New = as.data.frame(d_tsne_1_original)
head(New)
Cell_Cluster = New %>% select(CellNames,cl_kmeans,cl_hierarchical)
Cell_Cluster = select(New,CellNames)
Cell_Cluster = New %>% select(CellNames)
names(New)
library(dplyr)
Cell_Cluster = New %>% select(CellNames)
sessionInfo()
head(New)
Cell_clusters = cbind(d_tsne_1_original$CellNames,d_tsne_1_original$cl_kmeans,d_tsne_1_original$cl_hierarchical)
head(Cell_clusters)
Cell_clusters = cbind(New$CellNames,New$cl_kmeans,New$cl_hierarchical)
head(Cell_clusters)
write.csv(d_tsne_1_original,'CellClusters.csv')
head(d_tsne_1_original)
rownames(d_tsne_1_original) = d_tsne_1_original$CellNames
head(d_tsne_1_original)
d_tsne_1_original = d_tsne_1_original %>% select(-CellNames)
library(dplyr)
d_tsne_1_original = d_tsne_1_original %>% select(-CellNames)
write.csv(d_tsne_1_original,'CellClusters.csv')
pagoda.view.aspects(tamr2, cell.clustering = hc, box = TRUE, labCol = NA, margins = c(0.5, 20), col.cols = rbind(col.cols,AnnotationFile2$CellType),top=20)
pagoda.show.pathways(c("GO:0043518","GO:1902624"), varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
length(go.env)
get("GO:1990777", go.env)
get("GO:1990777 lipoprotein particle", go.env)
pagoda.show.pathways(c("GO:1990777 lipoprotein particle"), varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
clpca$clusters == 'geneCluster.74'
nam = clpca(clpca$clusters == 'geneCluster.74')
nam = clpca[clpca$clusters == 'geneCluster.74']
nam
nam=clpca$clusters
nam
nam$geneCluster.74
nam$geneCluster.110
nam$geneCluster.28
nam$geneCluster.79
nam$geneCluster.55
clpca$clusters$geneCluster.55
pagoda.show.pathways(clpca$clusters$geneCluster.55, varinfo, clpca, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.74, varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.110, varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.28, varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.135, varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.108, varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(c("GO:0043518 negative regulation of DNA damage response, signal transduction by p53 class mediator"), varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(c("GO:0002902 regulation of B cell apoptotic process"), varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.147, varinfo, clpca, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(c("GO:1902624 positive regulation of neutrophil migration"), varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(c("GO:0043368 positive T cell selection"), varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(c("GO:0045061 thymic T cell selection"), varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.93, varinfo, clpca, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.136, varinfo, clpca, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.137, varinfo, clpca, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(c("GO:0004601 peroxidase activity"), varinfo, go.env, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.98, varinfo, clpca, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.79, varinfo, clpca, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.55, varinfo, clpca, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
pagoda.show.pathways(clpca$clusters$geneCluster.68, varinfo, clpca, cell.clustering = hc, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE)
grid.arrange(plot_k, plot_h,  ncol=2)

setwd("~/Desktop/IntegratedAnalysis_ExpressionMatrices")
knitr::opts_chunk$set(echo = TRUE)
seqwell.data <- read.table(file = paste0("~/Desktop/IntegratedAnalysis_ExpressionMatrices/",
"pbmc_SeqWell.expressionMatrix.txt"))
tenx.data <- read.table(file = paste0("~/Desktop/IntegratedAnalysis_ExpressionMatrices/",
"pbmc_10X.expressionMatrix.txt"))
library(Seurat)
# cowplot enables side-by-side ggplots
library(cowplot)
seqwell <- CreateSeuratObject(raw.data = seqwell.data)
seqwell <- NormalizeData(object = seqwell)
seqwell <- ScaleData(object = seqwell)
seqwell <- FindVariableGenes(object = seqwell, do.plot = FALSE)
tenx <- CreateSeuratObject(raw.data = tenx.data)
tenx <- NormalizeData(object = tenx)
tenx <- ScaleData(object = tenx)
tenx <- FindVariableGenes(object = tenx, do.plot = FALSE)
hvg.seqwell <- rownames(x = head(x = seqwell@hvg.info, n = 2000))
hvg.tenx <- rownames(x = head(x = tenx@hvg.info, n = 2000))
hvg.seqwell
hvg.tenx
length(hvg.seqwell)
length(hvg.tenx)
hvg.union <- union(x = hvg.seqwell, y = hvg.tenx)
length(hvg.union)
tenx@meta.data[, "protocol"] <- "10X"
seqwell@meta.data[, "protocol"] <- "SeqWell"
dim(tenx)
tenx
setwd("~/Desktop/Combined")
knitr::opts_chunk$set(echo = TRUE)
Combined = read.csv('Combined.csv',row.names=1)
dim(Combined)
# This has genes as rows (~27k) and cells as columns (1417)
# read in the annotation file
AnnotationFile = read.csv('CellAnnotation.csv',row.names=1)
# Sanity check
dim(AnnotationFile)
head(Annotation)
head(AnnotationFile)
tail(AnnotationFile)
Combined1 = data.matrix(Combined)
# Then convert to a sparse matrix
expression.data <- Matrix(Combined1, sparse = T)
AnnotationFile1 = cbind(AnnotationFile,'CellNames'=1:nrow(AnnotationFile))
# Paste the string Cell to each of the numbers
AnnotationFile1$CellNames <- paste("Cell",AnnotationFile1$CellNames, sep="_")
# Now make this CellNames column as the row
rownames(AnnotationFile1) = AnnotationFile1$CellNames
library(dplyr)
AnnotationFile2 = AnnotationFile1 %>% select(-CellNames)
expressionObject <- CreateSeuratObject(raw.data = expression.data, min.cells = 3)
# Add the metadata to the object
expressionObject_1 <- AddMetaData(expressionObject, metadata = AnnotationFile2)
# Filter out cells
expressionFilteredObj <- FilterCells(expressionObject_1, subset.names = "nGene", low.thresholds = 500,  high.thresholds = Inf)
# Normalize data set
expressionNormalized <- NormalizeData(expressionFilteredObj)
# Keep only variable genes
expressionVariable <- FindVariableGenes(expressionNormalized, x.low.cutoff = 0.1)
# Scale the data
expressionScaled <- ScaleData(expressionVariable, genes.use = expressionVariable@var.genes, model.use = "negbinom")
# Now reduce the dimensions by running the PCA and saving 30 dimensions
# So all the features (~27k genes) are collapsed into 30 features
expressionPCA <- RunPCA(expressionScaled, pcs.compute = 30, weight.by.var = FALSE)
# Use the dimensions generated by PCA to create the tsne but we dont use all the dims
# we just use first 19 dimensions
expressionTsne <- RunTSNE(expressionPCA, dims.use = 1:19, do.fast = T)
dim(AnnotationFile2)
head(AnnotationFile2)
expressionClusters <- FindClusters(expressionTsne, reduction.type = "pca", dims.use = 1:19, save.SNN = T)
TSNEPlot(expressionClusters, do.label = T)
TSNEPlot(expressionClusters, group.by = "assigned_cluster")
TSNEPlot(expressionClusters, group.by = "CellType")
New <- CreateSeuratObject(raw.data = expression.data, min.cells = 3, min.genes = 200,
project = "10X_old")
mito.genes <- grep(pattern = "^MT-", x = rownames(x = New@data), value = TRUE)
New <- CreateSeuratObject(raw.data = expression.data, min.cells = 3, min.genes = 200,
project = "10X_old")
New <- AddMetaData(object = New, metadata = AnnotationFile2)
VlnPlot(object = New, features.plot = c("nGene", "nUMI", 'AnnotationFile2'), nCol = 3)
percent.mito
percent.mito <- Matrix::colSums(New@raw.data[mito.genes, ])/Matrix::colSums(New@raw.data)
percent.mito
AnnotationFile][,1]
AnnotationFile[,1]
length(AnnotationFile2[,1])
New <- CreateSeuratObject(raw.data = expression.data, min.cells = 3, min.genes = 200,
project = "10X_old")
pancreas.md <- all.data[, 2:3]
setwd("~/Desktop/SeuratPancreas/GSE84133_RAW")
library(Seurat)
library(Matrix)
all.files <- list.files("~/Desktop/SeuratPancreas/GSE84133_RAW")
# Initialize a data frame with 0 cols and 0 rows
all.data <- data.frame()
# Zip through the files and read them in and merge them together
for (i in all.files[1:4]) {
dat <- read.csv(paste("~/Desktop/SeuratPancreas/GSE84133_RAW/", i, sep = ""))
all.data <- rbind(all.data,data.frame(dat))
print(i)
}
# Now I have data in which the cells (Observations) are the rows and the features
# are in the columns. The features included first three columns which are
# 1) Unique cell id, 2) Unique cell barcode and 3) cell type as assigned_cluster.
# After those columns, the rest of the columns are the genes
# Save only the expression matrix by removing the first three columns and also
# transform the data since you want the features (genes) as rows and the observations
# (cells) as columns.
new.data <- t(all.data[, c(-1, -2, -3)])
# Sanity check
olnames(new.data) <- all.data[, 1]
colnames(new.data) <- all.data[, 1]
pancreas.data <- new.data
pancreas.data
pancreas.md <- all.data[, 2:3]
head(pancreas.md)
rownames(pancreas.md) <- all.data[, 1]
head(pancreas.md)
typeof(pancreas.md)
head(pancreas.md$assigned_cluster)
head(AnnotationFile2$CellType)
typeof(pancreas.md$assigned_cluster)
typeof(AnnotationFile2$CellType)
head(AnnotationFile2)
SNEPlot(expressionTsne,group.by ='CellType')
TSNEPlot(expressionTsne,group.by ='CellType')
TSNEPlot(expressionTsne,do.label=T)
TSNEPlot(expressionTsne,group.by='CellType')
getwd()
setwd("~/Desktop/pbm33K/filtered_gene_bc_matrices/hg19")
pbmc33k.data <- Read10X(data.dir = "~/Desktop/pbm33K/filtered_gene_bc_matrices/hg19/")
pbmc33k  <- CreateSeuratObject(raw.data = pbmc33k.data, min.cells = 3, project = "10X_PBMC33K", names.field = 2, names.delim = "\\-")
setwd("~/Desktop/Combined")
library(Seurat)
library(cowplot)
# read in the expression matrix
Combined = read.csv('Combined.csv',row.names=1)
dim(Combined)
# This has genes as rows (~27k) and cells as columns (1417)
# read in the annotation file
AnnotationFile = read.csv('CellAnnotation.csv',row.names=1)
# Sanity check
dim(AnnotationFile)
Combined1 = data.matrix(Combined)
# Then convert to a sparse matrix
expression.data <- Matrix(Combined1, sparse = T)
dim(expression.data)
AnnotationFile1 = cbind(AnnotationFile,'CellNames'=1:nrow(AnnotationFile))
# Paste the string Cell to each of the numbers
AnnotationFile1$CellNames <- paste("Cell",AnnotationFile1$CellNames, sep="_")
# Now make this CellNames column as the row
rownames(AnnotationFile1) = AnnotationFile1$CellNames
# Now drop the CellNames column
library(dplyr)
AnnotationFile2 = AnnotationFile1 %>% select(-CellNames)
dim(AnnotationFile2)
expressionObject <- CreateSeuratObject(raw.data = expression.data)
expressionObject_1 <- AddMetaData(expressionObject, metadata = AnnotationFile2)
expressionObject <- CreateSeuratObject(raw.data = expression.data, min.cells = 3)
expressionObject_1 <- AddMetaData(expressionObject, metadata = AnnotationFile2)
expressionFilteredObj <- FilterCells(expressionObject_1, subset.names = "nGene", low.thresholds = 500,  high.thresholds = Inf)
expressionNormalized <- NormalizeData(expressionFilteredObj)
# Keep only variable genes
expressionVariable <- FindVariableGenes(expressionNormalized, x.low.cutoff = 0.1)
expressionScaled <- ScaleData(expressionVariable, genes.use = expressionVariable@var.genes, model.use = "negbinom")
expressionPCA <- RunPCA(expressionScaled, pcs.compute = 30, weight.by.var = FALSE)
expressionTsne <- RunTSNE(expressionPCA, dims.use = 1:19, do.fast = T)
TSNEPlot(expressionTsne, group.by='CellType')
TSNEPlot(expressionTsne, group_by='CellType')
TSNEPlot(expressionTsne, group_by='Annotation$CellType')
TSNEPlot(expressionTsne, group_by='AnnotationFile2$CellType')
TSNEPlot(expressionTsne, group.by='AnnotationFile2$CellType')
TSNEPlot(expressionTsne, group.by='CellType')
TSNEPlot(expressionTsne, col='CellType')
TSNEPlot(expressionTsne, col='Annotation$CellType')
TSNEPlot(expressionTsne, col='AnnotationFile2$CellType')
sgCol <- rainbow(length(levels(AnnotationFile2)))[AnnotationFile2]
sgCol <- rainbow(length(levels(AnnotationFile2$CellType)))[AnnotationFile2$CellType]
sgCol
TSNEPlot(expressionClusters, do.label = T)
TSNEPlot(expressionClusters, col=sgCol)
TSNEPlot(expressionTsne, col=sgCol)
sgCol <- rainbow(length(levels(AnnotationFile2$CellType)))[AnnotationFile2$CellType]
TSNEPlot(expressionClusters, do.label = T)
TSNEPlot(expressionTsne, do.label = T)
TSNEPlot(expressionTsne, do.label = T,col=sgCol)
TSNEPlot(expressionTsne)
v=TSNEPlot(expressionTsne)
plot(v,col=sgCol)
table(AnnotationFile2$CellType)
metadata
expressionObject_1
expressionObject_1.metadata
TSNEPlot(expressionClusters, do.label = T)
TSNEPlot(expressionTsne)
TSNEPlot(expressionClusters)
TSNEPlot(expressionClusters,cells.use=NULL)
TSNEPlot(expressionTsne,cells.use=NULL)
TSNEPlot(expressionTsne,cells.use='CellType')
store = StashIdent(object=New,save.name='CellType')
TSNEPlot(expressionTsne)
TSNEPlot(expressionClusters)
pbmc <- StashIdent(object = expressionClusters, save.name = "CellType")
pbmc <- SetAllIdent(object = pbmc, id = "CellType")
TSNEPlot(pbmc)
TSNEPlot(oject=pbmc)
TSNEPlot(object=pbmc)
replicate = sample(x = c("rep1", "rep2")
)
replicate
pbmc <- StashIdent(object = expressionClusters, save.name = "CellType")
pbmc <- SetAllIdent(object = pbmc, id = "AnnotationFile2$CellType")
TSNEPlot(object=pbmc)
